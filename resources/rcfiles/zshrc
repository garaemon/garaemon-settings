# -*- mode: shell-script -*-
# -*- coding: utf-8 -*-
umask 022

export LC_ALL=en_US.UTF-8

#zsh
autoload -U colors
colors
autoload -U compinit
compinit
setopt correct
setopt beep

setopt list_types
setopt auto_list
setopt auto_menu
setopt magic_equal_subst
setopt auto_cd
setopt auto_param_keys
setopt pushd_ignore_dups
setopt auto_pushd

watch="all"
log

local GREEN=$'%{\e[1;32m%}'
local YELLOW=$'%{\e[1;33m%}'
local BLUE=$'%{\e[1;34m%}'
local LIGHT_BLUE=$'%{\e[1;36m%}'
local DEFAULT=$'%{\e[1;0m%}'
if [ "$TERM" = "emacs" ] ; then
    PROMPT="${LIGHT_BLUE}Yes, Maaster${DEFAULT}@${GREEN}${HOST}?${DEFAULT} [${BLUE}%~/${DEFAULT}]%% "
else
    PROMPT="${LIGHT_BLUE}Yes, Master${DEFAULT}@${GREEN}${HOST}?${DEFAULT} [${BLUE}%~/${DEFAULT}]%% "
fi

PROMPT2="%_%% "
SPROMPT="%r? べ, 別にあんたのために修正したんじゃないからね! [n,y,a,e]:"

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
bindkey -e

#alias
#alias ls='\ls -GF --color=auto'
alias ls="ls -G"
alias cp='cp -v'
alias mv='mv -v'
alias grep='grep --color=auto'

#ssh-agent
# you always need to cal init_ssh_agent when you want to activate ssh-agent
init_ssh_agent () {
    eval `ssh-agent`
    mkdir -p $HOME/.tmp/ssh-agent/
    ssh-add
    if [ $? = "0" ]; then
        local agent="$HOME/.tmp/ssh-agent/`hostname`_local"
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    else
        echo "init failed"
        return 1
    fi
}

update_ssh_agent () {
    update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`_local" \
        || update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`"
}

update_ssh_agent_ () {
    local agent="$1"
    if [ -z "$agent" ]; then
        return 1
    fi

    if [ -S "$agent" ]; then
        if [ ! "$SSH_AUTH_SOCK" -ef "$agent" ]; then
            export SSH_AUTH_SOCK_OLD=$SSH_AUTH_SOCK
        fi

        export SSH_AUTH_SOCK=$agent
        return 0
    elif [ ! -S "$SSH_AUTH_SOCK" ]; then
        echo "no ssh-agent"
        if [ -L "$agent" ]; then
            rm -rf $agent
        fi
        if [ -n "$SSH_AUTH_SOCK_OLD" ]; then
            if [ -S "$SSH_AUTH_SOCK_OLD" ]; then
                SSH_AUTH_SOCK=$SSH_AUTH_SOCK_OLD
            fi
            unset SSH_AUTH_SOCK_OLD
            update_ssh_agent
        fi
    elif [ ! -L "$SSH_AUTH_SOCK" ]; then
        ssh-add -l >/dev/null \
            && ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    fi
}


# X Window Setup
function get_xserver ()
{
    case $TERM in
        xterm )
            XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) 
            XSERVER=${XSERVER%%:*}
            ;;
        aterm | rxvt)
        # find some code that works here.....
            ;;
    esac  
}

if [ -z ${DISPLAY:=""} ]; then
    get_xserver
    if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || ${XSERVER} == "unix" ]]; then 
        DISPLAY=":0.0"          # Display on local host
    else                
        DISPLAY=${XSERVER}:0.0  # Display on remote host
    fi
fi

export DISPLAY

# PATH setup
export PYTHONPATH=$PYTHONPATH:$HOME/gprog/scan-scripts
export PATH=$PATH:$HOME/gprog/scan-scripts/bin
if [ -e $HOME/.zshrc.jsk ]; then
    echo loading jsk setup file ...
    source $HOME/.zshrc.jsk
fi

OS=`uname`
if [ "$OS" = "CYGWIN_NT-5.1" -o "$OS" = "CYGWIN_NT-6.0" ] ; then
    if [ -e $HOME/.zshrc.cygwin ]; then
        echo loading cygwin setup file ...
        source $HOME/.zshrc.cygwin
    fi
    if [ -e $HOME/.zshrc.cygwin.jsk ]; then
        echo loading jsk setup file ...
        source $HOME/.zshrc.cygwin.jsk
    fi
elif [ "$OS" = "Linux" ] ; then
    if [ -e $HOME/.zshrc.linux ]; then
        echo loading linux setup file ...
        source $HOME/.zshrc.linux
    fi
elif [ "$OS" = "Darwin" ] ; then
    if [ -e $HOME/.zshrc.darwin ]; then
        echo loading darwin setup file ...
        source $HOME/.zshrc.darwin
    fi
fi

# customizing zshrc?
if [ -e $HOME/.zshrc.mine ]; then
    echo loading customizing setup file ...
    source $HOME/.zshrc.mine
fi


#alias rm='trash-put -v'

# export CC="ccache gcc"
# export CXX="ccache g++"

alias wifi-diag="open '/System/Library/CoreServices/Wi-Fi Diagnostics.app'"
#alias pygmentize="pygmentize-2.7"
alias eclient='emacs-client -n'

export PATH=$PATH:$HOME/gprog/platex-create-pkg
#alias jbibtex=bibtex

export PATH=$PATH:$HOME/gprog/emacs-settings

export CC=gcc
source $HOME/.nvm/nvm.sh

alias titanium="$HOME/Library/Application\ Support/Titanium/mobilesdk/osx/1.7.5/titanium.py"
export PATH=/opt/android-sdk/tools:$PATH
export PATH=/opt/android-sdk/tools:$PATH

nvm use v0.10.3                  # for heroku
export NODE_PATH=~/.nvm/v0.10.3/lib/node_modules

# function chpwd() {
#     echo chpwd
#     if [ `echo $EMACS | grep -c "term"` -eq 1 ]; then
#         echo '\\\033AnSiTc' $PWD
#     fi
# }
# export LANG="ja_JP.utf-8"
export PATH=$PATH:$HOME/gprog/git-your-emacs

export PATH=$PATH:$HOME/gprog/heroku-nodekit


export PATH=$PATH:/usr/local/Cellar/pypy/1.9/bin/

fpath=($HOME/.zsh/functions/ $fpath) # not work?


# export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

export PATH=$PATH:$HOME/gprog/minify-make

export SENCHA_SDK_TOOLS_2_0_0_BETA3=/Applications/SenchaSDKTools-2.0.0-beta3
export PATH=$PATH:$SENCHA_SDK_TOOLS_2_0_0_BETA3

export PATH=$PATH:$HOME/gprog/jq

#ROS
#export ROS_OS_OVERRIDE=osx:homebrew
# export PATH=/usr/local/lib/wxPython/bin:$PATH
# if [ -e $HOME/ros/setup.zsh ]; then
#     source $HOME/ros/setup.zsh
# else
#     echo ... cannot find ros/setup.zsh
# fi
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$HOME/gprog/garaemon-ros-pkg
if [ -e $HOME/ros/groovy/setup.zsh ]; then
    source $HOME/ros/groovy/setup.zsh
fi

if [ -e /usr/share/drcsim/setup.sh ]; then
    ROS_WORKSPACE_ORG=$ROS_WORKSPACE
    PYTHONPATH_ORG=$PYTHONPATH
    source /usr/share/drcsim/setup.sh
    export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH_ORG:$ROS_PACKAGE_PATH
    export ROS_WORKSPACE=$ROS_WORKSPACE_ORG
    export PYTHONPATH=$PYTHONPATH_ORG:$PYTHONPATH
    export ROS_PACKAGE_PATH=`echo $(echo $ROS_PACKAGE_PATH | sed -e "s/:/\n/g" | awk '!($0 in A) && A[$0] = 1' | grep -v "opt/ros"; echo $ROS_PACKAGE_PATH | sed -e "s/:/\n/g" | awk '!($0 in A) && A[$0] = 1' | grep "opt/ros") | sed -e "s/ /:/g"`
    export VRC_CHEATS_ENABLED=1
    source $(rospack find hrpsys_gazebo_tutorials)/setup.sh
    
fi
alias rtmlaunch='`rospack find hrpsys_ros_bridge`/scripts/rtmlaunch'


#export HOMEBREW_CC=gcc

##################################################################
# oh my zsh
# Path to your oh-my-zsh configuration.

ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# af-magic candy jonathan
#ZSH_THEME="af-magic"
ZSH_THEME="af-magic"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git brew osx bower bundler mvn npm pip svn web-search)

[[ "$TERM" != "dumb" ]] && source $ZSH/oh-my-zsh.sh

# Customize to your needs...

PROMPT='$FG[237]Yes, Master? %D{[%K:%M:%S]}------------------------------------------------%{$reset_color%}
$FG[032]%~\
$(git_prompt_info) \
$FG[105]%(!.#.»)%{$reset_color%} '
RPROMPT='%F{006}%n$my_gray@$my_orange%m%{$reset_color%}%'
### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# rvm use 1.9.2

export PATH=/Library/Haskell/bin:$PATH
alias pandocpdf="pandoc -V documentclass=ltjarticle --latex-engine=lualatex -t pdf"

export COOKIE_SECRET="hkfc-sakuchan"
export PYTHONPATH="/usr/local/lib/python2.7/site-packages:$PYTHONPATH"
export PATH="$PATH":/usr/local/share/python
alias emacsclient="emacsclient -n"


export BASIC_USER="garaemon"
export BASIC_PASS="sakuchan"

#[[ -s "$HOME/.pythonbrew/etc/bashrc" ]] && source "$HOME/.pythonbrew/etc/bashrc"
#pybrew use 2.7.3


#source $HOME/ros_ws/setup.zsh

export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/mahout/bin:$PATH

export JAVA_HOME=/Library/Java/Home

# export _JAVA_OPTIONS="-Dfile.encoding=UTF-8"

# source $HOME/gprog/maven-zsh-completion/_mvn

if [ -d $HOME/.rbenv/bin ]; then
    export RBENV_ROOT=$HOME/.rbenv
    export PATH="$RBENV_ROOT/bin:$PATH"
    eval "$(rbenv init -)"
    rbenv global 1.9.3-p448
    export PATH=$HOME/.rbenv/versions/1.9.3-p448/bin:$PATH
fi


export PATH=$PATH:$HOME/gprog/snapshotter/bin
export PATH=$PATH:$HOME/gprog/s3sync/

alias hdfs="hadoop fs"
export HADOOP_HEAPSIZE=2000
function restart-hadoop() {
    /usr/local/Cellar/hadoop/1.1.2/libexec/bin/stop-all.sh
    yes | hadoop namenode -format
    /usr/local/Cellar/hadoop/1.1.2/libexec/bin/start-all.sh
    hadoop dfsadmin -safemode leave 
}


function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls
    # ↓おすすめ
    # ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    zle reset-prompt
    return 0
}
zle -N do_enter
bindkey '^m' do_enter

export RECOME_ENV=development-local

export PATH=$HOME/gprog/elastic-mapreduce-ruby:$PATH

source $HOME/.emacs.d/check_for_upgrade.sh
