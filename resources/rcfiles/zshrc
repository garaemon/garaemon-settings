# -*- mode: shell-script -*-
# -*- coding: utf-8 -*-
umask 022

export PATH=$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin


export LC_ALL=en_US.UTF-8

#zsh
autoload -U colors
colors
autoload -U compinit
compinit
setopt correct
setopt beep

setopt list_types
setopt auto_list
setopt auto_menu
setopt magic_equal_subst
setopt auto_cd
setopt auto_param_keys
setopt pushd_ignore_dups
setopt auto_pushd

watch="all"
log

local GREEN=$'%{\e[1;32m%}'
local YELLOW=$'%{\e[1;33m%}'
local BLUE=$'%{\e[1;34m%}'
local LIGHT_BLUE=$'%{\e[1;36m%}'
local DEFAULT=$'%{\e[1;0m%}'


HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
bindkey -e

#alias

alias cp='cp -v'
alias mv='mv -v'
alias grep='grep --color=auto'

#ssh-agent
# you always need to cal init_ssh_agent when you want to activate ssh-agent
init_ssh_agent () {
    eval `ssh-agent`
    mkdir -p $HOME/.tmp/ssh-agent/
    ssh-add
    if [ $? = "0" ]; then
        local agent="$HOME/.tmp/ssh-agent/`hostname`_local"
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    else
        echo "init failed"
        return 1
    fi
}

update_ssh_agent () {
    update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`_local" \
        || update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`"
}

update_ssh_agent_ () {
    local agent="$1"
    if [ -z "$agent" ]; then
        return 1
    fi

    if [ -S "$agent" ]; then
        if [ ! "$SSH_AUTH_SOCK" -ef "$agent" ]; then
            export SSH_AUTH_SOCK_OLD=$SSH_AUTH_SOCK
        fi

        export SSH_AUTH_SOCK=$agent
        return 0
    elif [ ! -S "$SSH_AUTH_SOCK" ]; then
        echo "no ssh-agent"
        if [ -L "$agent" ]; then
            rm -rf $agent
        fi
        if [ -n "$SSH_AUTH_SOCK_OLD" ]; then
            if [ -S "$SSH_AUTH_SOCK_OLD" ]; then
                SSH_AUTH_SOCK=$SSH_AUTH_SOCK_OLD
            fi
            unset SSH_AUTH_SOCK_OLD
            update_ssh_agent
        fi
    elif [ ! -L "$SSH_AUTH_SOCK" ]; then
        ssh-add -l >/dev/null \
            && ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    fi
}


# X Window Setup
if [ "$TERM" != "dumb" ]; then
    PID=`pgrep -n -u $USER gnome-session`
    if [ -n "$PID" ]; then
        export DISPLAY=`awk 'BEGIN{FS="="; RS="\0"}  $1=="DISPLAY" {print $2; exit}' /proc/$PID/environ`
        echo "DISPLAY set to $DISPLAY"
    else
        echo "Could not set DISPLAY"
    fi
    unset PID
fi


# PATH setup
export PYTHONPATH=$PYTHONPATH:$HOME/gprog/scan-scripts
export PATH=$PATH:$HOME/gprog/scan-scripts/bin
if [ -e $HOME/.zshrc.jsk ]; then
    echo loading jsk setup file ...
    source $HOME/.zshrc.jsk
fi

OS=`uname`
if [ "$OS" = "CYGWIN_NT-5.1" -o "$OS" = "CYGWIN_NT-6.0" ] ; then
    if [ -e $HOME/.zshrc.cygwin ]; then
        echo loading cygwin setup file ...
        source $HOME/.zshrc.cygwin
    fi
    if [ -e $HOME/.zshrc.cygwin.jsk ]; then
        echo loading jsk setup file ...
        source $HOME/.zshrc.cygwin.jsk
    fi
elif [ "$OS" = "Linux" ] ; then
    if [ -e $HOME/.zshrc.linux ]; then
        echo loading linux setup file ...
        source $HOME/.zshrc.linux
    fi
elif [ "$OS" = "Darwin" ] ; then
    if [ -e $HOME/.zshrc.darwin ]; then
        echo loading darwin setup file ...
        source $HOME/.zshrc.darwin
    fi
fi

#alias rm='trash-put -v'

# export CC="ccache gcc"
# export CXX="ccache g++"

alias wifi-diag="open '/System/Library/CoreServices/Wi-Fi Diagnostics.app'"
#alias pygmentize="pygmentize-2.7"
alias eclient='emacsclient -n'

export PATH=$PATH:$HOME/gprog/platex-create-pkg
export PATH=$PATH:$HOME/gprog/spark
export PATH=$PATH:$HOME/gprog/shell-color-pallet
#alias jbibtex=bibtex

export PATH=$PATH:$HOME/gprog/emacs-settings

export CC=gcc
source $HOME/.nvm/nvm.sh

alias titanium="$HOME/Library/Application\ Support/Titanium/mobilesdk/osx/1.7.5/titanium.py"
export PATH=/opt/android-sdk/tools:$PATH
export PATH=/opt/android-sdk/tools:$PATH

nvm use v0.10.28                  # for heroku
export NODE_PATH=~/.nvm/v0.10.28/lib/node_modules

[ -s ${HOME}/.rvm/scripts/rvm ] && source ${HOME}/.rvm/scripts/rvm


export PATH=$PATH:$HOME/gprog/git-your-emacs
export PATH=$PATH:$HOME/gprog/heroku-nodekit
export PATH=$PATH:/usr/local/Cellar/pypy/1.9/bin/

fpath=($HOME/.zsh/functions/ $fpath) # not work?
# export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

export PATH=$PATH:$HOME/gprog/minify-make
export SENCHA_SDK_TOOLS_2_0_0_BETA3=/Applications/SenchaSDKTools-2.0.0-beta3
export PATH=$PATH:$SENCHA_SDK_TOOLS_2_0_0_BETA3
export PATH=$PATH:$HOME/gprog/jq

################################################################################
# ros
rosenv_use_hook() {
    if [ "$(rospack find hrpsys_gazebo_tutorials 2>/dev/null)" != "" ] ; then
        source `rospack find hrpsys_gazebo_tutorials`/setup.sh
    fi
    if [ "$(rospack find roseus 2>/dev/null)" != "" ] ; then
        export PATH=`rospack find roseus`/bin:$PATH
    fi
    if [ -e $HOME/gprog/garaemon-settings/resources/rcfiles/roszsh ]; then
        source $HOME/gprog/garaemon-settings/resources/rcfiles/roszsh
    fi
    export EUSDIR=`rospack find euslisp`/jskeus/eus
    alias rtmlaunch='`rospack find hrpsys_ros_bridge`/scripts/rtmlaunch'
}

source $HOME/gprog/rosenv/rosenv.sh
if [ "$ROSENV_CURRENT" = "" ]; then 
    rosenv use jsk.hydro
else
    rosenv use
fi


# rename catmake to orig_catmake
eval "$(echo "orig_catmake() {"; declare -f catmake | tail -n +2)"
catmake() {
    orig_catmake $@
    local result=$?
    if [ "$result" = "0" ] ; then
        t update "[success!!] catkin_make $* [`date`]" > /dev/null 2>&1
    else
        t update "[failed!!] catkin_make $* [`date`]" > /dev/null 2>&1
    fi
    return $result
}

# alias roseus with rlwrap
alias roseus="rlwrap rosrun roseus roseus"

# if [ -e $HOME/prog/jsk-ros-pkg-unreleased ]; then
#     export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$HOME/prog/jsk-ros-pkg-unreleased
# fi

export CVSDIR=$HOME/prog
export OPENHRPHOME=$HOME/prog/OpenHRP
export ROBOT=HRP2JSKNT
export HRP2NO=16
export ARCHDIR=Linux64

#export ROS_PARALLEL_JOBS=`grep -c processor /proc/cpuinfo`
if [ -e /proc/cpuinfo ]; then
    alias rosmake="rosmake --pjobs=`grep -c processor /proc/cpuinfo`"
fi

function rossetrobot() {
    local hostname=${1-"pr1012"}
    local ros_port=${2-"11311"}
    export ROS_MASTER_URI=http://$hostname:$ros_port
    echo -e "\e[1;31mset ROS_MASTER_URI to $ROS_MASTER_URI\e[m"
    rossetip
}
function rossetlocal() {
    rossetrobot localhost
    unset ROS_HOSTNAME
    unset ROS_IP
}

function rossetip() {
    export ROS_IP=`LANGUAGE=en LANG=C ifconfig | grep 'wlan|eth' -E -A 7 | grep inet\  | grep -v 127.0.0.1 | sed 's/.*inet addr:\([0-9\.]*\).*/\1/' | head -1`
    export ROS_HOSTNAME=$ROS_IP
    echo -e "\e[1;31mset ROS_IP and ROS_HOSTNAME to $ROS_IP\e[m"
}
if [ `which sw_vers > /dev/null 2>&1` ]; then
    rossetlocal
fi

################################################################################
# oh my zsh
ZSH=$HOME/.oh-my-zsh
ZSH_THEME=""
COMPLETION_WAITING_DOTS="true"
plugins=(git brew osx bower bundler mvn npm pip svn web-search)
# keep PS1
PS1_ORG=$PS1
source $ZSH/oh-my-zsh.sh
PS1=$PS1_ORG

################################################################################
# powerline
if [ "$TERM" != "dumb" -a "$POWERLINE_LOADED" != "true" ] ; then
    if [ "$OS" = "Darwin" ]; then # if osx
        if [ -e /usr/local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh ]; then
            source /usr/local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
        else
            export POWERLINE_COMMAND=$HOME//.local/bin/powerline
            source $HOME/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
        fi
    else
        if [ -e /usr/local/lib/python2.7/dist-packages/powerline/bindings/zsh/powerline.zsh ]; then
            source /usr/local/lib/python2.7/dist-packages/powerline/bindings/zsh/powerline.zsh
        else
            export POWERLINE_COMMAND=$HOME//.local/bin/powerline
            source $HOME/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
        fi
    fi
    newline_replacer="s@__NEWLINE__@\n@g"
    POWERLINE_LOADED=true
    if [ `uname` = Darwin ]; then
        export PROMPT="`echo $PROMPT | gsed 's/)/ | gsed $newline_replacer )/g'`
\$ "
    else
        export PROMPT="`echo $PROMPT | sed 's/)/ | sed $newline_replacer )/g'`
\$ "
    fi
fi
PROMPT2="%_%% "
SPROMPT="%r? べ, 別にあんたのために修正したんじゃないからね! [n,y,a,e]:"

if [ `uname` != Darwin ]; then
    eval `dircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-dark`
    alias ls="ls -AF --color=auto"
else
    eval `gdircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-dark`
    alias ls="gls -AF --color=auto"
fi


### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# rvm use 1.9.2

export PATH=/Library/Haskell/bin:$PATH
alias pandocpdf="pandoc -V documentclass=ltjarticle --latex-engine=lualatex -t pdf"

export COOKIE_SECRET="hkfc-sakuchan"
export PYTHONPATH="/usr/local/lib/python2.7/site-packages:$PYTHONPATH"
export PATH="$PATH":/usr/local/share/python


export BASIC_USER="garaemon"
export BASIC_PASS="sakuchan"

export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/mahout/bin:$PATH

# export JAVA_HOME=/Library/Java/Home
# export _JAVA_OPTIONS="-Dfile.encoding=UTF-8"

# source $HOME/gprog/maven-zsh-completion/_mvn

if [ -d $HOME/.rbenv/bin ]; then
    export RBENV_ROOT=$HOME/.rbenv
    export PATH="$RBENV_ROOT/bin:$PATH"
    eval "$(rbenv init -)"
    rbenv global 1.9.3-p448
    export PATH=$HOME/.rbenv/versions/1.9.3-p448/bin:$PATH
fi


export PATH=$PATH:$HOME/gprog/snapshotter/bin
export PATH=$PATH:$HOME/gprog/s3sync/

alias hdfs="hadoop fs"
export HADOOP_HEAPSIZE=2000
function restart-hadoop() {
    /usr/local/Cellar/hadoop/1.1.2/libexec/bin/stop-all.sh
    yes | hadoop namenode -format
    /usr/local/Cellar/hadoop/1.1.2/libexec/bin/start-all.sh
    hadoop dfsadmin -safemode leave 
}


function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls
    # ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status --short --branch
        echo
        echo
    fi
    zle reset-prompt
    return 0
}
# zle -N do_enter
# bindkey '^m' do_enter

export PATH=$HOME/gprog/elastic-mapreduce-ruby:$PATH

source $HOME/.emacs.d/check_for_upgrade.sh

alias git-graph="git log --graph --decorate --oneline"

#percol settings

which percol > /dev/null
if [ $? = 0 ]; then
    function percol-select-all() {
        # history
        local tac
        if which tac > /dev/null; then
            tac="tac"
        else
            tac="tail -r"
        fi
        HISTORIES=$(history -n 1 | eval $tac)
        DIRS=$(dirs -pl | xargs -n 1 echo cd)
        BUFFER=$(echo $HISTORIES "\n" $DIRS | \
            percol --match-method regex --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle clear-screen
    }
    zle -N percol-select-all
    bindkey '^r' percol-select-all

    function search-rostopic-by-percol(){
        LBUFFER=$LBUFFER$(rostopic list | percol)
        zle -R -c
    }
    zle -N search-rostopic-by-percol
    bindkey '^[r' search-rostopic-by-percol
        
    function search-document-by-percol(){
        DOCUMENT_DIR="\
/path/to/doc/directory1
/path/to/doc/directory2"
        SELECTED_FILE=$(echo $DOCUMENT_DIR | xargs find | \
            grep -E "\.(pdf|txt|odp|odt|ods)$" | percol --match-method regex)
        if [ $? -eq 0 ]; then
            gnome-open $SELECTED_FILE
        fi
    }
    alias sd='search-document-by-percol'

    function insert-file-by-percol(){
        LBUFFER=$LBUFFER$(ls -A | percol --match-method regex | tr '\n' ' ' | \
            sed 's/[[:space:]]*$//') # delete trailing space
        zle -R -c
    }
    zle -N insert-file-by-percol
    bindkey '^[c' insert-file-by-percol
    
    function percol_select_dirstack_entry() {
        BUFFER=$(dirs -pl | percol --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle -R -c
    }
    zle -N percol_select_dirstack_entry
    bindkey '^[d' percol_select_dirstack_entry
    
    alias p=percol
fi

function preexec_fluent() {
    curl -X POST -d 'json={"command":"'${1%% *}'"}' localhost:9880/zsh > /dev/null 2>&1
}
preexec_functions=(preexec_fluent)

export PATH=/usr/local/bin:/usr/local/share/python:$PATH
export PYTHONPATH="/usr/local/lib/python2.7/site-packages:$PYTHONPATH"

# oh-my-zsh overwrite history
unalias history
# export JAVA_HOME=/usr/lib/jvm/java-6-openjdk

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

if [ -f $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi


function sine_wave() {
    i=0
    for i in `seq 0 10`
    do 
        SIN=$(python -c "from math import *;print map( lambda x: ceil(6*sin((x+$i)*pi/5)), range($(tput cols)) )" | tr -d '[]' | spark)
        echo -ne $SIN\\r 
        let i=i+1
        sleep 0.05
    done
    echo
}
which sine > /dev/null
if [ $? = 0 -a "$TERM" != "dumb" ] ; then
    sine_wave
fi

export TERM=xterm-256color

# utility
add_github_fork() {
    local repo
    local user_name
    user_name=$1
    repo=$(git remote show origin -n | grep 'Fetch URL' | cut -f5 -d" " \
        | xargs -n 1 -i basename {} .git)
    echo adding git@github.com:${user_name}/${repo}.git as ${user_name}
    git remote add ${user_name} git@github.com:${user_name}/${repo}.git
    git fetch --all
}

add_garaemon_fork() {
    add_github_fork garaemon
}

add_garaemon_fork_subdirs() {
    local dirs
    dirs=$(find . -name .git | xargs -n 1 dirname)
    for d in $(echo $dirs)
    do
        (cd $d; add_garaemon_fork)
    done
}

update_garaemon_settings() {
    (cd $HOME/gprog/garaemon-settings && git pull)
    (cd $HOME/gprog/emacs.d && git pull && git submodule update --init)
    (cd $HOME/gprog/rosenv && git pull)
}

git_clean_subdirs() {
    local pkgs
    pkgs=$(find . -name .git | xargs -n 1 dirname)
    for pkg in $(echo $pkgs)
    do
        echo -e "\e[1;31m" '>>' cleaning $pkg "\e[m"
        (cd $pkg && git clean -xfd)
    done
}

git_pull_subdirs() {
    local pkgs
    pkgs=$(find . -name .git | xargs -n 1 dirname)
    for pkg in $(echo $pkgs)
    do
        echo -e "\e[1;31m" '>>' updating $pkg "\e[m"
        (cd $pkg && git pull)
    done
}

git_cleanup() {
    git clean -xfd
    git reset --hard
}

until-success() {
    $@
    while [ $? != 0 ];
    do
        sleep 1;
        $@
    done
}

export PATH=$HOME/.local/bin:$PATH

# customizing zshrc?
if [ -e $HOME/.zshrc.mine ]; then
    echo loading customizing setup file ...
    source $HOME/.zshrc.mine
fi

which toilet > /dev/null 2>&1
if [ $? = 0 -a "$TERM" != "dumb" ]; then
    toilet --font future welcome, master
    toilet --font future "  " $(whoami)@$(hostname)
fi

function chpwd() { ls }
