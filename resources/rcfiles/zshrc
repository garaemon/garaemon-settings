# -*- mode: shell-script -*-
# -*- coding: utf-8 -*-
umask 022

EDITOR=vim
VISUAL=vim

# export PATH=$PATH:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
# export PATH=/bin:/usr/bin:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/bin:/usr/local/sbin
export PATH=/usr/local/opt/texinfo/bin:/usr/local/bin:/usr/local/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin:/bin:/sbin
# export LC_ALL=en_US.UTF-8

# for emacs tramp
case "$TERM" in
  dumb | emacs)
    PROMPT="%m:%~> "
    unsetopt zle
    return
    ;;
esac

#zsh
fpath=(~/.zsh_fpath $fpath)
autoload -U colors
colors
autoload -U compinit
compinit
setopt correct
setopt beep
autoload -Uz add-zsh-hook

setopt list_types
setopt auto_list
setopt auto_menu
setopt magic_equal_subst
setopt auto_cd
setopt auto_param_keys
setopt pushd_ignore_dups
setopt auto_pushd
setopt interactive_comments # ignore hash in command line
setopt magic_equal_subst # complete after = like --prefix=/usr/locl
zstyle ':completion:*' menu select interactive
#setopt menu_complete

compdef -d scp
compdef -d rsync

watch="all"
#log

local GREEN=$'%{\e[1;32m%}'
local YELLOW=$'%{\e[1;33m%}'
local BLUE=$'%{\e[1;34m%}'
local LIGHT_BLUE=$'%{\e[1;36m%}'
local DEFAULT=$'%{\e[1;0m%}'


HISTFILE=~/.zsh_history
HISTSIZE=5000
SAVEHIST=5000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
bindkey -e

if [ -e "${HOME}/.nvm/nvm.sh" ]; then
    echo sourcing nvm.sh
    source ${HOME}/.nvm/nvm.sh
    nvm use v8.9.3 > /dev/null
fi

# setup pyenv
if [ -e "${HOME}/.pyenv" ]; then
    export PYENV_ROOT=$HOME/.pyenv
    export PATH=${PYENV_ROOT}/bin:${PATH}
    eval "$(pyenv init -)"
    export PYTHON_ROOT=$(pyenv prefix)
else
    export PYTHON_ROOT=""
fi

#alias
# alias cp='cp -v'
alias mv='mv -v'
alias grep='grep --color=auto'

# for ttyrec environment.
# This zshrc expects using ttyrec with IS_TTYREC=true like
# `IS_TTYREC=true ttyrec terminal.log`.
function echo-ttyrec-safe {
    if [ "${IS_TTYREC}" = "true" ]; then
        :
    else
        echo $@
    fi
}

# export DISPLAY=:0

export PATH=$PATH:$HOME/gprog/ttygif
export PATH=$PATH:$HOME/gprog/seq2gif

# PATH setup
export PYTHONPATH=$PYTHONPATH:$HOME/gprog/scan-scripts
export PATH=$PATH:$HOME/gprog/scan-scripts/bin
if [ -e $HOME/.zshrc.jsk ]; then
    echo loading jsk setup file ...
    source $HOME/.zshrc.jsk
fi

OS=`uname`
if [ "$OS" = "CYGWIN_NT-5.1" -o "$OS" = "CYGWIN_NT-6.0" ] ; then
    if [ -e $HOME/.zshrc.cygwin ]; then
        echo-ttyrec-safe loading cygwin setup file ...
        source $HOME/.zshrc.cygwin
    fi
    if [ -e $HOME/.zshrc.cygwin.jsk ]; then
        echo-ttyrec-safe loading jsk setup file ...
        source $HOME/.zshrc.cygwin.jsk
    fi
elif [ "$OS" = "Linux" ] ; then
    if [ -e $HOME/.zshrc.linux ]; then
        echo-ttyrec-safe loading linux setup file ...
        source $HOME/.zshrc.linux
    fi
elif [ "$OS" = "Darwin" ] ; then
    if [ -e $HOME/.zshrc.darwin ]; then
        echo-ttyrec-safe loading darwin setup file ...
        source $HOME/.zshrc.darwin
    fi
fi

alias wifi-diag="open '/System/Library/CoreServices/Wi-Fi Diagnostics.app'"

export PATH=$PATH:$HOME/gprog/platex-create-pkg
export PATH=$PATH:$HOME/gprog/spark
export PATH=$PATH:$HOME/gprog/spark-ping
export PATH=$PATH:$HOME/gprog/shell-color-pallet
export PATH=$PATH:$HOME/gprog/wakatime
export PATH=$PATH:$HOME/gprog/multi_crop
#alias jbibtex=bibtex
# for bibtex
# from http://qiita.com/amayaw9/items/01d626ce1ae18c27df8b
export BSTINPUTS=$BSTINPUTS:/usr/share/texmf/jbibtex/bst


export PATH=$PATH:$HOME/gprog/emacs-settings

export CC=gcc

export PATH=/opt/android-sdk/tools:$PATH
export PATH=/opt/android-sdk/tools:$PATH

export PATH=$PATH:$HOME/gprog/git-your-emacs
export PATH=$PATH:$HOME/gprog/heroku-nodekit
export PATH=$PATH:/usr/local/Cellar/pypy/1.9/bin

fpath=($HOME/.zsh/functions/ $fpath) # not work?

export PATH=$PATH:$HOME/gprog/minify-make
export SENCHA_SDK_TOOLS_2_0_0_BETA3=/Applications/SenchaSDKTools-2.0.0-beta3
export PATH=$PATH:$SENCHA_SDK_TOOLS_2_0_0_BETA3
export PATH=$PATH:$HOME/gprog/jq

# update roszsh
if [ ! -e $HOME/.roszsh ] ; then
    wget --timestamping https://raw.githubusercontent.com/ros/ros/indigo-devel/tools/rosbash/roszsh -O $HOME/.roszsh -q > /dev/null
    if [ -e $HOME/.roszsh ]; then
        source $HOME/.roszsh
    fi
fi

function record_time_start {
    set +x
    RECORD_START_TIME=$(date +%s%N)
    RECORD_TIME_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
    RECORD_FOLD_NAME=$1
    echo -e "\e[0Ktraivs_fold:start:$RECORD_FOLD_NAME"
    echo -e "\e[0Ktraivs_time:start:$RECORD_TIME_ID"
    set -x
}

function record_time_end {
    set +x
    _COLOR=${1:-32}
    RECORD_END_TIME=$(date +%s%N)
    TIME_ELAPSED_SECONDS=$(( ($RECORD_END_TIME - $RECORD_START_TIME)/1000000000 ))
    echo -e "traivs_time:end:$RECORD_TIME_ID:start=$RECORD_START_TIME,finish=$RECORD_END_TIME,duration=$(($RECORD_END_TIME - $RECORD_START_TIME))\n\e[0K"
    echo -e "traivs_fold:end:$RECORD_FOLD_NAME"
    echo -e "\e[0K\e[${_COLOR}mFunction $RECORD_FOLD_NAME takes $(( $TIME_ELAPSED_SECONDS / 60 )) min $(( $TIME_ELAPSED_SECONDS % 60 )) sec\e[0m"
    set -x
}


export NO_ROS_PROMPT=true

################################################################################
# ros
rosenv_use_hook() {
    rospack find jsk_tools >/dev/null 2>&1
    if [ $? = 0 ]; then
        source $(rospack find jsk_tools)/src/zshrc.ros
        if [ -e $HOME/.roszsh ]; then
            source $HOME/.roszsh
        fi
    fi
    rospack find hrpsys_ros_bridge >/dev/null 2>&1
    if [ $? = 0 ]; then
        alias rtmlaunch='`rospack find openrtm_tools`/scripts/rtmlaunch'
    fi
}

# if [ -e $HOME/gprog/rosenv/rosenv.sh ]; then
#     source $HOME/gprog/rosenv/rosenv.sh
#     if [ "$OS" = "Darwin" ] ; then
#         rosenv use indigo >/dev/null
#     else
#         if [ "$ROSENV_CURRENT" = "" ]; then
#             rosenv use jsk.hydro >/dev/null
#         else
#             rosenv use >/dev/null
#         fi
#     fi
# fi

#if [ "$OS" = "Darwin" ]; then # if osx
#    source $HOME/ros_catkin_ws/install_isolated/setup.zsh
#fi

# alias roseus with rlwrap
alias roseus="rlwrap rosrun roseus roseus"

# if [ -e $HOME/prog/jsk-ros-pkg-unreleased ]; then
#     export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$HOME/prog/jsk-ros-pkg-unreleased
# fi
# install by
if [[ ! -e "${ZDOTDIR:-$HOME}/.zprezto" ]]; then
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
fi
if [[ -e "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
    source ${ZDOTDIR:-$HOME}/.zprezto/init.zsh
    setopt hist_ignore_dups     # ignore duplication command history list
    setopt share_history        # share command history data
fi
PROMPT2="%_%% "
# re-define +vi-set_novcs_prompt_symbol function in order to change symbol at the begginign of the
# command line. It should be after `prompt giddie` command.
function +vi-set_novcs_prompt_symbol {
    _prompt_giddie_symbol='$'
}
function +vi-set_vcs_prompt_symbol {
    _prompt_giddie_symbol='$'
}

if [[ ! -e ${HOME}/.zsh ]]; then
    git clone https://github.com/rupa/z.git $HOME/.zsh
fi
source $HOME/.zsh/z.sh
compctl -U -K _z_zsh_tab_completion z

if [ `uname` != Darwin ]; then
    eval `dircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-light`
    alias ls="ls -AF --color=auto"
else
    eval `gdircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-light`
    alias ls="gls -AF --color=auto"
fi

#percol settings

which percol > /dev/null
if [ $? = 0 ]; then
    function percol_select_history() {
        local tac
        which gtac >/dev/null && tac="gtac" || { which tac >/dev/null && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history


    function search-rostopic-by-percol(){
        LBUFFER=$LBUFFER$(rostopic list | percol)
        zle -R -c
    }
    zle -N search-rostopic-by-percol
    bindkey '^[r' search-rostopic-by-percol

    function search-document-by-percol(){
        DOCUMENT_DIR="\
/path/to/doc/directory1
/path/to/doc/directory2"
        SELECTED_FILE=$(echo $DOCUMENT_DIR | xargs find | \
            grep -E "\.(pdf|txt|odp|odt|ods)$" | percol --match-method regex)
        if [ $? -eq 0 ]; then
            gnome-open $SELECTED_FILE
        fi
    }
    alias sd='search-document-by-percol'

    function insert-file-by-percol(){
        LBUFFER=$LBUFFER$(ls -A | percol --match-method regex | tr '\n' ' ' | \
            sed 's/[[:space:]]*$//') # delete trailing space
        zle -R -c
    }
    zle -N insert-file-by-percol
    bindkey '^[c' insert-file-by-percol

    function percol_select_dirstack_entry() {
        BUFFER=$(dirs -pl | percol --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle -R -c
    }
    zle -N percol_select_dirstack_entry
    bindkey '^[d' percol_select_dirstack_entry

    function pk() {
        ps aux | percol | awk '{ print $2 }' | xargs kill
    }

    function rosn() {
        if [ "$1" = "" ]; then
            topic=$(rosnode list | percol | xargs -n 1 rosnode info | percol | sed -e 's%.* \* \(/[/a-zA-Z0-9_]*\) .*%\1%')
        else
            topic=$(rosnode info $1 | percol | sed -e 's%.* \* \(/[/a-zA-Z0-9_]*\) .*%\1%')
        fi
        if [ "$topic" != "" ] ; then
            rost $topic
        fi
    }
    function rost() {
        if [ "$1" = "" ]; then
            node=$(rostopic list | percol | xargs -n 1 rostopic info | percol | sed -e 's%.* \* \(/[/a-zA-Z0-9_]*\) .*%\1%')
        else
            node=$(rostopic info $1 | percol | sed -e 's%.* \* \(/[/a-zA-Z0-9_]*\) .*%\1%')
        fi
        if [ "$node" != "" ] ; then
            rosn $node
        fi
    }
    function grepe() {
        grep $@ | percol |  sed -e 's/^\([^:]*\):.*$'/\\1/ | xargs -n 1 emacsclient -n
    }

    function rosm() {
        rosmsg list | percol | xargs -n 1 rosmsg show
    }

    function rostopic_echo_p () {
        rostopic echo $(rostopic list | p)
    }

    function rostopic_info_p () {
        rostopic info $(rostopic list | p)
    }

    # code from http://stillpedant.hatenablog.com/entry/percol-cd-history
    typeset -U chpwd_functions
    CD_HISTORY_FILE=${HOME}/.cd_history_file # cd 履歴の記録先ファイル
    function chpwd_record_history() {
        echo $PWD >> ${CD_HISTORY_FILE}
    }
    chpwd_functions=($chpwd_functions chpwd_record_history)

    # Chose directory using percol based on history.
    # As the number of visits in the past increases, it comes to the top of the selection candidate
    function percol_get_destination_from_history() {
        sort ${CD_HISTORY_FILE} | uniq -c | sort -r | \
            sed -e 's/^[ ]*[0-9]*[ ]*//' | \
            sed -e s"/^${HOME//\//\\/}/~/" | \
            percol | xargs echo
    }

    # widget to cd to the directory using percol based on history
    function percol_cd_history() {
        local destination=$(percol_get_destination_from_history)
        [ -n $destination ] && cd ${destination/#\~/${HOME}}
        #zle reset-prompt
        zle accept-line
    }
    zle -N percol_cd_history

    # insert directory based on history using percol
    function percol_insert_history() {
        local destination=$(percol_get_destination_from_history)
        if [ $? -eq 0 ]; then
            local new_left="${LBUFFER} ${destination} "
            BUFFER=${new_left}${RBUFFER}
            CURSOR=${#new_left}
        fi
        zle reset-prompt
    }
    zle -N percol_insert_history

    bindkey '^[' percol_cd_history
    alias j=percol_cd_history
    alias p=percol
fi

export PATH=$HOME/gprog/ffmpeg-movie-builder:$PATH
export PATH=$PATH:$HOME/.bin

if [ -f $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi


function sine_wave() {
    i=0
    for i in `seq 0 10`
    do
        SIN=$(python -c "from math import *;print map( lambda x: ceil(6*sin((x+$i)*pi/5)), range($(tput cols)) )" | tr -d '[]' | spark)
        echo -ne $SIN\\r
        let i=i+1
        sleep 0.05
    done
    echo
}

# utility
add_github_fork() {
    local repo
    local user_name
    user_name=$1
    repo=$(git remote show origin -n | grep 'Fetch URL' | cut -f5 -d" " \
        | xargs -n 1 -i basename {} .git)
    echo adding git@github.com:${user_name}/${repo}.git as ${user_name}
    git remote add ${user_name} git@github.com:${user_name}/${repo}.git
    # echo adding https://github.com/${user_name}/${repo}.git as ${user_name}
    # git remote add ${user_name} https://github.com/${user_name}/${repo}.git
    git fetch --all
}

add_garaemon_fork() {
    add_github_fork garaemon
}

add_garaemon_fork_subdirs() {
    local dirs
    dirs=$(find . -name .git | xargs -n 1 dirname)
    for d in $(echo $dirs)
    do
        (cd $d > /dev/null; add_garaemon_fork)
    done
}

update_garaemon_settings() {
    (cd $HOME/gprog/garaemon-settings > /dev/null && git pull)
    (cd $HOME/gprog/emacs.d > /dev/null && git pull && git submodule update --init)
    if [ -e $HOME/gprog/rosenv/rosenv.sh ]; then
	(cd $HOME/gprog/rosenv > /dev/null && git pull)
    fi
}

git_clean_subdirs() {
    local pkgs
    pkgs=$(find . -name .git | xargs -n 1 dirname)
    for pkg in $(echo $pkgs)
    do
        echo -e "\e[1;31m" '>>' cleaning $pkg "\e[m"
        (cd $pkg > /dev/null && git clean -xfd)
    done
}

git_pull_subdirs() {
    local pkgs
    pkgs=$(find . -name .git | xargs -n 1 dirname)
    for pkg in $(echo $pkgs)
    do
        echo -e "\e[1;31m" '>>' updating $pkg "\e[m"
        (cd $pkg > /dev/null && git pull)
    done
}

git_cleanup() {
    git clean -xfd
    git reset --hard
}

git_delete_all_branched() {
    git branch -D `git branch --merged | grep -v \* | xargs`
}

until-success() {
    $@
    while [ $? != 0 ];
    do
        sleep 1;
        $@
    done
}

export PATH=$HOME/.local/bin:$PATH
export PATH=$PATH:$HOME/gprog/garaemon-settings/scripts/utils
export PATH=$PATH:$HOME/gprog/pltcli/bin
export PATH=$PATH:$HOME/gprog/simpler-dot
export PATH=$PATH:$HOME/gprog/tidier-pdfimages
export PATH=$HOME/bin/:$PATH

if [ "$EMACS" != "t" ]; then
    #aa_say.py "welcome, master                                   $(whoami)@$(hostname)"
    #pokemonsay "welcome, master                                   $(whoami)@$(hostname)"
	:
fi

# function chpwd() { ls }

function git-branch-remove-all-local() {
    git branch --merged master | grep -v '*' |xargs -I % echo git branch -d %
}

function git-branch-remove-all-local-exec() {
    git branch --merged master | grep -v '*' | xargs -I % git branch -d %
}

function git-branch-remove-all-remote() {
    # dryrun
    local remote=$1
    if [ "$remote" = "" ]; then
        echo "Specify remote branch"
    else
        git remote prune $remote
        git branch -a --merged | grep -v master | grep remotes/$remote| sed -e "s% *remotes/$remote/%%" | xargs -I% echo git push $remote :%
    fi
}

function git-branch-remove-all-remote-exec() {
    local remote=$1
    if [ "$remote" = "" ]; then
        echo "Specify remote branch"
    else
        git branch -a --merged | grep -v master | grep remotes/$remote| sed -e "s% *remotes/$remote/%%" | xargs -I% git push $remote :%
    fi
}

function rename-spaces() {
    # Replace spaces in file with underscores
    mv -i "$*" "$(echo $* | sed -e 's/\s\+/_/g')"
}


function ev() {
    # use C-xC-q to toggle read only
    emacsclient -e "(find-file-read-only \"$1\")"
}

function dropbox-share() {
    target=$(md5sum $1 | cut -f1 -d ' ').${1##*.}
    cp $1 ~/Dropbox/Public/tmp/$target
    echo -e "File is available on $fg[cyan] $(dropbox puburl ~/Dropbox/Public/tmp/$target)$reset_color"
    echo -e $'\U1F61D' $'\U1F61D' $'\U1F61D' $'\U1F61D'
}

# added by travis gem
[ -f /home/lueda/.travis/travis.sh ] && source /home/lueda/.travis/travis.sh

alias rviz="rosrun rviz rviz"
alias rqt_reconfigure="rosrun rqt_reconfigure rqt_reconfigure"
alias docker-bash="sudo docker run -i -t ubuntu:12.04 /bin/bash"
# xset mouse 3 0
alias v="view"
alias s="source ~/.zshrc"
alias git-graph="git log --graph --decorate --oneline"

which hub 2>&1 >/dev/null
if [ $? = 0 ]; then
    eval "$(hub alias -s)"
fi
if [[ ! -e $HOME/.local/share/diff-so-fancy ]] ; then
    git clone https://github.com/so-fancy/diff-so-fancy.git $HOME/.local/share/diff-so-fancy
fi
export PATH=$PATH:$HOME/.local/share/diff-so-fancy

# git aliases
git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"
git config --global alias.see browse
git config --global alias.pr pull-request
git config --global alias.co checkout
git config --global alias.st status
git config --global alias.unstage "reset -q HEAD --"
#git config --global alias.discard "checkout --"
git config --global alias.uncommit "reset --mixed HEAD~"
#git config --global alias.amend "commit --amend"
git config --global alias.graph "log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order"
git config --global alias.precommit "diff --cached --diff-algorithm=minimal -w"
git config --global alias.unmerged "diff --name-only --diff-filter=U"
git config --global alias.remotes "remotes = remote -v"
alias git-twodiff="git difftool -y -x \"colordiff -y -W $COLUMNS\" | less -R"

# no ROS environment
# export ROSLAUNCH_SSH_UNKNOWN=1
# rossetlocal >/dev/null 2>&1

# for emacs
perl -wle \
   'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
   PATH > ~/.emacs.d/shellenv.el

# automatically clone repositories
# if [ -e $HOME/gprog/garaemon-settings/scripts/install_repositories.sh ]; then
#     $HOME/gprog/garaemon-settings/scripts/install_repositories.sh
# fi

# zplug
if [ -e $HOME/.zshrc.zplug ]; then
    echo-ttyrec-safe loading customizing setup file for zplug...
    source $HOME/.zshrc.zplug
fi

# customizing zshrc?
if [ -e $HOME/.zshrc.mine ]; then
    echo-ttyrec-safe loading customizing setup file ...
    source $HOME/.zshrc.mine
fi

function clang-format-view {
    local fname=$(mktemp)
    clang-format $1 > $fname
    colordiff -W 200 -y $1 $fname | less
}

# wrapping tip command to use virtualenv
function tips {
    (cd ~/gprog/tips && source .venv/bin/activate && ./bin/tips $@)
}

function restart-dns {
    # Restart DNS Cache. It is only available on mac os.
    if [ "$(uname)" = "Darwin" ] ; then
        echo Restarting dns ...
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
        sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    else
        echo "It's not mac os, skip"
    fi
}

export PATH=$PATH:$HOME/gprog/depot_tools
export PATH=$PATH:$HOME/Library/Android/sdk/tools

# Google Cloud SDK
if [ -e $HOME/google-cloud-sdk/completion.zsh.inc ]; then
    source $HOME/google-cloud-sdk/completion.zsh.inc
fi

if [ -e $HOME/google-cloud-sdk/path.zsh.inc ]; then
    source $HOME/google-cloud-sdk/path.zsh.inc
fi

[[ -s "/Users/ryohei/.gvm/scripts/gvm" ]] && source "/Users/ryohei/.gvm/scripts/gvm"

ruby_version="2.2.0"
if [ -e $HOME/.rvm/scripts/rvm ]; then
    source ~/.rvm/scripts/rvm
    if ! rvm list | grep "${ruby_version}" >/dev/null ; then
        rvm install "ruby-${ruby_version}"
    fi
    rvm use ruby-${ruby_version} >/dev/null
    # update ~/.rvmrc to supress warning message
    echo rvm_silence_path_mismatch_check_flag=1 > ~/.rvmrc
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
fi

if [ "$OS" = "Darwin" ] ; then
    alias e='emacsclient -n'
    :
else
    alias e='emacsclient -n'
    alias emacs='emacs-snapshot'
fi

function e() {
    emacsclient -n $(echo $1 | cut -f1 -d:)
}

# hack to return 0 from `source ~/.zshrc`
echo -n
