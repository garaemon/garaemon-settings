# -*- mode: shell-script -*-
# -*- coding: utf-8 -*-

ZSHRC_PROFILE=false

if [ "$ZSHRC_PROFILE" = "true" ]; then
  zmodload zsh/zprof
fi


umask 022
EDITOR=vim
VISUAL=vim

export LC_CTYPE=en_US.UTF-8

# for emacs tramp
case "$TERM" in
  dumb | emacs)
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    PS1='$ '
    PROMPT='$ '
    return
    ;;
  "xterm-ghostty")
    export TERM="xterm-256color"
    ;;
esac

#zsh
autoload -U colors
colors

# Setup completion before `autoload`.
if [[ ! -e $HOME/.completions ]]; then
  mkdir -p $HOME/.completions
fi
if [[ -e $HOME/.completions ]]; then
  fpath=($HOME/.completions $fpath)
fi

autoload -Uz compinit
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C

setopt correct
setopt beep
autoload -Uz add-zsh-hook

setopt list_types
setopt auto_list
setopt auto_menu
setopt magic_equal_subst
setopt auto_cd
setopt auto_param_keys
setopt pushd_ignore_dups
setopt auto_pushd
setopt interactive_comments # ignore hash in command line
setopt magic_equal_subst    # complete after = like --prefix=/usr/locl
zstyle ':completion:*' menu select interactive
#setopt menu_complete

compdef -d scp
compdef -d rsync

watch="all"
#log

local GREEN=$'\e[1;32m'
local YELLOW=$'\e[1;33m'
local BLUE=$'\e[1;34m'
local LIGHT_BLUE=$'\e[1;36m'
local DEFAULT=$'\e[1;0m'

# Zsh history setup
HISTFILE=~/.zsh_history
HISTSIZE=10000000
SAVEHIST=10000000
HIST_STAMPS="yyyy-mm-dd"     # not working well?
setopt EXTENDED_HISTORY      # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY    # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY         # Share history between all sessions.
setopt HIST_IGNORE_DUPS      # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS  # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE     # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS     # Do not write a duplicate event to the history file.
setopt HIST_VERIFY           # Do not execute immediately upon history expansion.
setopt APPEND_HISTORY        # append to history file (Default)
setopt HIST_NO_STORE         # Don't store history commands
setopt HIST_REDUCE_BLANKS    # Remove superfluous blanks from each command line being added to the history.

bindkey -e

# for ttyrec environment.
# This zshrc expects using ttyrec with IS_TTYREC=true like
# `IS_TTYREC=true ttyrec terminal.log`.
function echo-ttyrec-safe() {
  if [ "${IS_TTYREC}" = "true" ]; then
    :
  else
    echo $@
  fi
}

OS=$(uname)
case "$OS" in
  CYGWIN_NT-*)
    if [ -e $HOME/.zshrc.cygwin ]; then
      echo-ttyrec-safe loading cygwin setup file ...
      source $HOME/.zshrc.cygwin
    fi
    if [ -e $HOME/.zshrc.cygwin.jsk ]; then
      echo-ttyrec-safe loading jsk setup file ...
      source $HOME/.zshrc.cygwin.jsk
    fi
    ;;
  Linux)
    if [ -e $HOME/.zshrc.linux ]; then
      echo-ttyrec-safe loading linux setup file ...
      source $HOME/.zshrc.linux
    fi
    ;;
  Darwin)
    if [ -e $HOME/.zshrc.darwin ]; then
      echo-ttyrec-safe loading darwin setup file ...
      source $HOME/.zshrc.darwin
    fi
    ;;
esac

if [ -e $HOME/.zshrc.mine ]; then
  echo-ttyrec-safe loading customizing setup file ...
  source $HOME/.zshrc.mine
fi

# update roszsh
if [ ! -e $HOME/.roszsh ]; then
  wget --timestamping https://raw.githubusercontent.com/ros/ros/indigo-devel/tools/rosbash/roszsh -O $HOME/.roszsh -q >/dev/null
  if [ -e $HOME/.roszsh ]; then
    source $HOME/.roszsh
  fi
fi

if which starship >/dev/null 2>&1; then
  eval "$(starship init zsh)"
fi

if [[ ! -e ${HOME}/.zsh ]]; then
  git clone https://github.com/rupa/z.git $HOME/.zsh
fi
source $HOME/.zsh/z.sh
compctl -U -K _z_zsh_tab_completion z

if [ $(uname) != Darwin ]; then
  eval $(dircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-light)
  alias ls="ls -AF --color=auto"
else
  eval $(gdircolors $HOME/gprog/dircolors-solarized/dircolors.ansi-light)
  alias ls="gls -AF --color=auto"
fi

if [ -f $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source $HOME/gprog/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

git_delete_all_branched() {
  git branch -D $(git branch --merged | grep -v \* | xargs)
}

function git-branch-remove-all-local() {
  git branch --merged master | grep -v '*' | xargs -I % echo git branch -d %
}

function git-branch-remove-all-local-exec() {
  git branch --merged master | grep -v '*' | xargs -I % git branch -d %
}

function git-branch-remove-all-remote() {
  local remote=$1
  if [ "$remote" = "" ]; then
    echo "Specify remote branch"
  else
    git remote prune $remote
    git branch -a --merged | grep -v master | grep remotes/$remote | sed -e "s% *remotes/$remote/%%" | xargs -I% echo git push $remote :%
  fi
}

function git-branch-remove-all-remote-exec() {
  local remote=$1
  if [ "$remote" = "" ]; then
    echo "Specify remote branch"
  else
    git branch -a --merged | grep -v master | grep remotes/$remote | sed -e "s% *remotes/$remote/%%" | xargs -I% git push $remote :%
  fi
}


if [[ ! -e $HOME/.local/share/diff-so-fancy ]]; then
  git clone https://github.com/so-fancy/diff-so-fancy.git $HOME/.local/share/diff-so-fancy
fi
export PATH=$PATH:$HOME/.local/share/diff-so-fancy

# for emacs
if [ -e $HOME/.emacs.d ]; then
  perl -wle \
       'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
       PATH >~/.emacs.d/shellenv.el
fi

# zplug
# if [ -e $HOME/.zshrc.zplug ]; then
#   echo-ttyrec-safe loading customizing setup file for zplug...
#   source $HOME/.zshrc.zplug
# fi

function restart-dns() {
  # Restart DNS Cache. It is only available on mac os.
  if [ "$(uname)" = "Darwin" ]; then
    echo Restarting dns ...
    sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
  else
    echo "It's not mac os, skip"
  fi
}

# Google Cloud SDK
if [ -e $HOME/google-cloud-sdk/completion.zsh.inc ]; then
  source $HOME/google-cloud-sdk/completion.zsh.inc
fi

if [ -e $HOME/google-cloud-sdk/path.zsh.inc ]; then
  source $HOME/google-cloud-sdk/path.zsh.inc
fi

if alias e >/dev/null; then
  unalias e
fi

function e() {
  # If the argument contains :
  emacsclient -n $(echo $1 | cut -f1 -d:)
  if [ "$?" != "0" ]; then
    echo No emacsclient is available
    return 1
  fi
  if tmux list-windows -F "#{window_id}:#{window_name}" | grep -e 'emacs$' 2>&1 >/dev/null ; then
    tmux display-message -p '#I' >~/.emacs.d/emacsclient-window
    tmux select-window -t $(tmux list-windows -F "#{window_id}:#{window_name}" | grep -e 'emacs$' |
                              cut -d ':' -f1)
  fi
}

# Search history by peco
# Based on:
#  1. https://github.com/mooz/percol#zsh-history-search
#  2. https://github.com/joshskidmore/zsh-fzf-history-search/tree/master

if (( $+commands[peco] )); then

  peco_history_search() {
    setopt extendedglob

    FC_ARGS="-l -i"
    CANDIDATE_LEADING_FIELDS=4

    history_cmd="fc ${=FC_ARGS} -1 0"

      if (( $+commands[awk] )); then
        history_cmd="$history_cmd | awk '!seen[\$0]++'"
      else
        # In case awk is not installed fallback to uniq.
        # `uniq` will only remove commands that are repeated consecutively.
        history_cmd="$history_cmd | uniq"
      fi

    candidates=(${(f)"$(eval $history_cmd | peco)"})
    local ret=$?
    if [ -n "$candidates" ]; then
      if (( $CANDIDATE_LEADING_FIELDS != 1 )); then
        BUFFER="${candidates[@]/(#m)[0-9\* \-\:]##/${${(As: :)MATCH}[${CANDIDATE_LEADING_FIELDS},-1]}}"
      else
        BUFFER="${candidates[@]}"
      fi
      BUFFER=$(printf "${BUFFER[@]//\\\\n/\\\\\\n}")
      zle vi-fetch-history -n $BUFFER
      zle end-of-line
    fi
    zle reset-prompt
    return $ret
  }

  zle -N peco_history_search
  bindkey '^R' peco_history_search
fi

# TODO: add completion
function roslaunch-args() {
  roslaunch $@ --args $(roslaunch $@ --nodes | peco)
}
export ROSCONSOLE_FORMAT='[${severity}] [${time}] [${node}:${logger}]: ${message}'

if [ -e $HOME/gitai/catkin_ws/devel/setup.zsh ]; then
  source ~/gitai/catkin_ws/devel/setup.zsh
fi

function catkin-compile-commands-json() {
  local catkin_ws=$(echo $CMAKE_PREFIX_PATH | cut -d: -f1)/..
  # Verify catkin cmake args contains -DCMAKE_EXPORT_COMPILE_COMMANDS=ON.
  # If the arguments does not include the option, add to cmake args.
  (cd "${catkin_ws}" && catkin config | grep -- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON >/dev/null)
  local catkin_config_contains_compile_commands=$?
  if [ $catkin_config_contains_compile_commands -ne 0 ]; then
    echo catkin config does not include -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    (
      cd "${catkin_ws}" &&
        catkin config -a --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    )
  fi
  # Run catkin build in order to run cmake and generate compile_commands.json
  (cd "${catkin_ws}" && catkin build)
  # Find compile_commands.json in build directory and create symlink to the top of the package
  # directories.
  local package_directories=$(find "${catkin_ws}/src" -name package.xml | xargs -n 1 dirname)
  for package_dir in $(echo $package_directories); do
    local package=$(echo $package_dir | xargs -n 1 basename)
    (
      cd "${catkin_ws}"
      if [ -e ${catkin_ws}/build/$package/compile_commands.json ]; then
        ln -sf ${catkin_ws}/build/$package/compile_commands.json \
           $(rospack find $package)/compile_commands.json
      fi
    )
  done
}

# Wrapper of catkin_test_results
function catkin-test-results() {
  local target_dir=$(realpath ${1:-.})
  if [ ${target_dir} = "/" ]; then
    :
  elif [ -e ${target_dir}/package.xml ]; then
    local pkg_name=$(basename $(readlink -f ${target_dir}))
    local catkin_ws=$(echo ${CMAKE_PREFIX_PATH} | cut -d: -f1)/..
    catkin_test_results --verbose ${catkin_ws}/build/${pkg_name}
  else
    catkin-test-results ${target_dir}/..
  fi
}

# golang
export GOPATH=$HOME/.go
export PATH=$PATH:$GOPATH/bin

if which gh > /dev/null; then
  if [ ! -e ~/.completions/_gh ]; then
    echo Installing gh completion
    gh completion -s zsh > ~/.completions/_gh
  fi
fi

function ssh-with-copy-id() {
  command ssh -o "PasswordAuthentication=no" $1 exit
  if [ $? != "0" ]; then
    echo "Failed to ssh w/o password. Copy id_rsa.pub to the machine."
    ssh-copy-id $1
  fi
  command ssh -o "PasswordAuthentication=no" $@
}

function mosh-with-copy-id() {
  command ssh -o "PasswordAuthentication=no" $1 exit
  if [ $? != "0" ]; then
    echo "Failed to ssh w/o password. Copy id_rsa.pub to the machine."
    ssh-copy-id $1
  fi
  command mosh --ssh='ssh -o "PasswordAuthentication=no"' $@
}

# This MOSH_ESCAPE_KEY setting does not work but it can ignore C-^ escape key
# of mosh.
export MOSH_ESCAPE_KEY="~"

# Change title before mosh for iTerm
# Please uncheck all the check box in Preference > Appearance > Window & Tab Titles
if [ "$OS" = "Darwin" ]; then
  function mosh() {
    echo -ne "\033]0;$@\007"
    mosh-with-copy-id $@
  }
  function ssh() {
    echo -ne "\033]0;$@\007"
    ssh-with-copy-id $@
  }
else
  function mosh() {
    mosh-with-copy-id $@
  }
  function ssh() {
    ssh-with-copy-id $@
  }
fi

# Change terminal title to current hostname
precmd() {
  echo -ne "\033]0;$(hostname)\007"
}

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

add-fork() {
  gh repo fork --remote --remote-name garaemon
}

git-branch-for-pr() {
  CURRENT_BRANCH_NAME=$(git branch --show-current)
  ORIGINAL_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')

  git checkout "${ORIGINAL_BRANCH}"
  git pull
  echo "Creating a branch pr/${CURRENT_BRANCH_NAME}"
  git checkout -b "pr/${CURRENT_BRANCH_NAME}"
  git cherry-pick "${CURRENT_BRANCH_NAME}"
  git push -u garaemon "pr/${CURRENT_BRANCH_NAME}"
  git checkout "${CURRENT_BRANCH_NAME}"
}

function roscode() {
  (roscd $1 && code .)
}

compctl -K "_roscomplete" "roscode"

[ -s "$NVM_DIR/zsh_completion" ] && \. "$NVM_DIR/zsh_completion" # This loads nvm bash_completion


if [ -e $HOME/.dotnet ]; then
  export PATH="$PATH:$HOME/.dotnet:$HOME/.dotnet/tools"
fi

if [ -e /usr/libexec/java_home ]; then
  # If no Java SDK is available, java_home commands show a warning message. To ignore it,
  # we redirect the standard error to /dev/null.
  export JAVA_HOME=$(/usr/libexec/java_home 2>/dev/null)
fi

# Unalias git if aliased. GITAI's setup.sh alias git to hub command.
alias git >/dev/null
if [ $? = 0 ]; then
  unalias git
fi

# Alias to use `gh` command for github enterprise environment.
function ghe()
{
  GH_HOST=github.gitai.tech gh $@
}

# Run eval $(gh copilot alias -- zsh). However, `gh copilot alias`` is slow.
# So, we cache the result to $HOME/.zshrc.copilot.
if [ ! -e $HOME/.zshrc.copilot ]; then
  if which gh >/dev/null 2>&1; then
    if gh extension list | grep "gh copilot" >/dev/null 2>&1; then
      gh copilot alias -- zsh > ~/.zshrc.copilot
    else
      echo Please install gh copilot by "gh extension install github/gh-copilot" >&2
    fi
  fi
fi

if [ -e $HOME/.zshrc.copilot ]; then
  source $HOME/.zshrc.copilot
fi

# print tmux env
if [ -z "$TMUX" ]; then
  # If not in tmux environment
  if tmux has-session 2>/dev/null; then
      echo "${YELLOW}[tmux] There is a tmux session${DEFAULT}"
    else
      echo "${RED}[tmux] No tmux session${DEFAULT}"
  fi
fi
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# ssh agent
# eval "$(ssh-agent -s)"
# for linux
if [ -z "$SSH_AUTH_SOCK" ]; then
   # Check for a currently running instance of the agent
   RUNNING_AGENT="`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`"
   if [ "$RUNNING_AGENT" = "0" ]; then
        # Launch a new instance of the agent
        ssh-agent -s &> $HOME/.ssh/ssh-agent
   fi
   eval `cat $HOME/.ssh/ssh-agent` > /dev/null
fi

# Mac starts ssh-agent automatically. To support both Linux and Mac,
# check if ssh-agent has a key or not.
if ! ssh-add -l >/dev/null; then
    ssh-add $HOME/.ssh/id_rsa 2>/dev/null
fi


if [ "$ZSHRC_PROFILE" = true ]; then
  zprof
fi

#alias
# alias cp='cp -v'
alias mv='mv -v'
alias grep='grep --color=auto'
alias wifi-diag="open '/System/Library/CoreServices/Wi-Fi Diagnostics.app'"
alias rqt_reconfigure="rosrun rqt_reconfigure rqt_reconfigure"
alias docker-bash="sudo docker run -i -t ubuntu:12.04 /bin/bash"
alias v="view"
alias s="source ~/.zshrc"
alias git-graph="git log --graph --decorate --oneline"
alias git-twodiff="git difftool -y -x \"colordiff -y -W $COLUMNS\" | less -R"
alias c=code

# Check if copied rc files have diff or not

(
  repo_dir="$HOME/gprog/garaemon-settings"
  if [ ! -e ${repo_dir} ]; then
    return
  fi

  declare -A file_mapping
  file_mapping[roles/zsh/files/zlogin]="$HOME/.zlogin"
  file_mapping[roles/zsh/files/zlogout]="$HOME/.zlogout"
  file_mapping[roles/zsh/files/zprofile]="$HOME/.zprofile"
  file_mapping[roles/zsh/files/zshenv]="$HOME/.zshenv"
  file_mapping[roles/zsh/files/zshrc]="$HOME/.zshrc"
  file_mapping[roles/zsh/files/zshrc.zplug]="$HOME/.zshrc.zplug"
  file_mapping[roles/tmux/files/tmux.conf]="$HOME/.tmux.conf"

  for repo_file installed_file in "${file_mapping[@]}"; do
    repo_path="$repo_dir/$repo_file"

    if ! diff -q "$installed_file" "$repo_path" > /dev/null 2>&1; then
      echo "Warning: ${installed_file} has been modified from the repository version." >&2
      echo "Please consider updating your repository or reverting your local changes." >&2
    fi
  done
)
