- name: Get latest peco version
  uri:
    url: https://github.com/peco/peco/releases/latest
    method: HEAD
    follow_redirects: true
    return_content: false
  register: peco_latest_version_response

- name: Set peco_latest_version
  set_fact:
    peco_latest_version:
      stdout: "{{ peco_latest_version_response.url.split('/')[-1] }}"

- name: Set OS Name (darwin)
  set_fact:
    os_name: "darwin"
  when: ansible_os_family == "Darwin"

- name: Set OS Name (debian)
  set_fact:
    os_name: "linux"
  when: ansible_os_family == "Debian"

- name: set architecture
  set_fact:
    peco_arch: amd64
  when: ansible_architecture == 'amd64' or ansible_architecture == 'x86_64'

- name: set architecture
  set_fact:
    peco_arch: arm64
  when: ansible_architecture == 'aarch64' or ansible_architecture == 'arm64'

- name: Create tempfile for peco download (darwin)
  tempfile:
    state: file
    suffix: peco_darwin_zip
  register: peco_tempfile_darwin
  when: ansible_os_family == "Darwin"

- name: Download latest peco (darwin)
  get_url:
    url: https://github.com/peco/peco/releases/download/{{ peco_latest_version.stdout }}/peco_darwin_{{ peco_arch }}.zip
    dest: "{{ peco_tempfile_darwin.path }}"
  register: peco_download_darwin
  when: ansible_os_family == "Darwin"

- name: Create temp directory for peco extraction (darwin)
  tempfile:
    state: directory
    suffix: peco_extract_darwin
  register: peco_extract_dir_darwin
  when: peco_download_darwin.changed and ansible_os_family == "Darwin"

- name: Extract peco (darwin)
  when: peco_download_darwin.changed and ansible_os_family == "Darwin"
  unarchive:
    src: "{{ peco_tempfile_darwin.path }}"
    dest: "{{ peco_extract_dir_darwin.path }}"
    remote_src: yes

- name: Create tempfile for peco download (debian)
  tempfile:
    state: file
    suffix: peco_debian_tar_gz
  register: peco_tempfile_debian
  when: ansible_os_family == "Debian"

- name: Download latest peco (debian)
  get_url:
    url: https://github.com/peco/peco/releases/download/{{ peco_latest_version.stdout }}/peco_linux_{{ peco_arch }}.tar.gz
    dest: "{{ peco_tempfile_debian.path }}"
  register: peco_download_debian
  when: ansible_os_family == "Debian"

- name: Create temp directory for peco extraction (debian)
  tempfile:
    state: directory
    suffix: peco_extract_debian
  register: peco_extract_dir_debian
  when: peco_download_debian.changed and ansible_os_family == "Debian"

- name: Extract peco (debian)
  when: peco_download_debian.changed and ansible_os_family == "Debian"
  unarchive:
    src: "{{ peco_tempfile_debian.path }}"
    dest: "{{ peco_extract_dir_debian.path }}"
    remote_src: true

- name: Create .local/bin
  file:
    path: ~/.local/bin
    state: directory

- name: Copy to .local/bin/ (darwin)
  copy:
    src: "{{ peco_extract_dir_darwin.path }}/peco_darwin_{{ peco_arch }}/peco"
    dest: ~/.local/bin/peco
    mode: "0755"
    remote_src: yes
  when: ansible_os_family == "Darwin" and peco_download_darwin.changed

- name: Copy to .local/bin/ (debian)
  copy:
    src: "{{ peco_extract_dir_debian.path }}/peco_linux_{{ peco_arch }}/peco"
    dest: ~/.local/bin/peco
    mode: "0755"
    remote_src: yes
  when: ansible_os_family == "Debian" and peco_download_debian.changed
